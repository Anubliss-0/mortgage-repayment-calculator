@import '../../../../styles/variables.scss';
@import '../../../../styles/utilities.scss';
@import '../../../../styles/typography.scss';

$state-colors: (
    default: (
        border: $slate-500,
        unit-bg: $slate-100,
        unit-color: $slate-700
    ),
    hover: (
        border: $slate-900
    ),
    focus: (
        border: $lime,
        unit-bg: $lime,
        unit-color: $slate-900
    ),
    invalid: (
        border: $red,
        unit-bg: $red,
        unit-color: $white
    )
);

@function get-state-color($state, $property) {
    @return map-get(map-get($state-colors, $state), $property);
}

@mixin state-styles($state) {
    border-color: get-state-color($state, border);

    .unit {
        span {
            background-color: get-state-color($state, unit-bg);
            color: get-state-color($state, unit-color);
        }
    }
}

.numberField {
    @include flex-column-start;
    max-width: 26.5rem;

    label {
        @include text-preset-4;
        color: $slate-700;
    }
}

.fieldInput {
    @include flex-row;
    @include text-preset-3;
    height: 3rem;
    border: 1px solid get-state-color(default, border);
    border-radius: 4px;
    margin-top: $spacing-150;
    box-sizing: border-box;
    overflow: hidden;
    transition: border-color 400ms;

    .unit {
        @include flex-row-center;

        span {
            color: get-state-color(default, unit-color);
            padding: $spacing-150;
            background-color: get-state-color(default, unit-bg);
            transition: background-color 400ms, color 400ms;
            @include text-preset-4;
        }
    }
    
    input {
        width: 100%;
        border: none;
        padding-left: $spacing-200;
        color: $slate-900;
        @include text-preset-3;

        &:focus {
            outline: none;
        }
    }


    &:hover {
        @include state-styles(hover);

        &:focus-within {
            @include state-styles(focus);
        }

        &.invalid {
            @include state-styles(invalid);
        }
    }

    &:focus-within {
        @include state-styles(focus);
    }

    &.invalid {
        @include state-styles(invalid);
    }
}